// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, enabled, created_date, last_modified_date) VALUES ($1, $2, now(), now()) RETURNING id, version, name, enabled, created_date, last_modified_date
`

type CreateUserParams struct {
	Name    string
	Enabled bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Enabled)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Name,
		&i.Enabled,
		&i.CreatedDate,
		&i.LastModifiedDate,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, version, name, enabled, created_date, last_modified_date FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.Name,
			&i.Enabled,
			&i.CreatedDate,
			&i.LastModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, version, name, enabled, created_date, last_modified_date FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Name,
		&i.Enabled,
		&i.CreatedDate,
		&i.LastModifiedDate,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, version, name, enabled, created_date, last_modified_date FROM users WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Name,
		&i.Enabled,
		&i.CreatedDate,
		&i.LastModifiedDate,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users set name = $2, enabled = $3, last_modified_date = now(), version = version + 1 WHERE id = $1 AND version = $4 RETURNING id, version, name, enabled, created_date, last_modified_date
`

type UpdateUserParams struct {
	ID      int64
	Name    string
	Enabled bool
	Version int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Enabled,
		arg.Version,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Name,
		&i.Enabled,
		&i.CreatedDate,
		&i.LastModifiedDate,
	)
	return i, err
}
